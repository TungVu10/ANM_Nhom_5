using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using Microsoft.Win32;




using DocumentFormat.OpenXml.Wordprocessing;
using ClosedXML.Excel;
using UglyToad.PdfPig;
using UglyToad.PdfPig.Content;
using PdfSharp.Pdf.Advanced;
using PdfSharp.Drawing;


namespace VD2
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // Thêm vào đầu lớp Form1:
        //Random rnd = new Random();

        byte[][] subKeys = new byte[16][];
        byte[] desKey;

        //Khóa thay đổi
        private string originalKey = ""; // Lưu lại khóa gốc để so sánh
        private bool isAutoGenerated = false; // Kiểm tra trạng thái sinh khóa
        private bool isKeyChangedNotified = false; // Tránh thông báo nhiều lần
        private bool isKeyDifferent = false; // Theo dõi nếu đang ở trạng thái khác originalKey

        //Bản rõ và Bản mã thay đổi
        private string originalPlainText = "";
        private string originalEncryptedText = "";
        private bool isFirstEncrypt = true;

        //Khóa bí mật thay đổi
        private string originalPrivateKey = "";
        private bool isPrivateKeyChangedNotified = false;

        public MainWindow()
        {
            InitializeComponent();
        }

        // Bảng hoán vị IP
        int[] IP = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

        // Bảng hoán vị FP
        int[] FP = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};

        // Bảng mở rộng E
        int[] E = {
    32, 1, 2, 3, 4, 5,
    4, 5, 6, 7, 8, 9,
    8, 9,10,11,12,13,
   12,13,14,15,16,17,
   16,17,18,19,20,21,
   20,21,22,23,24,25,
   24,25,26,27,28,29,
   28,29,30,31,32,1
};

        // Bảng hoán vị P
        int[] P = {
    16, 7, 20, 21,
    29, 12, 28, 17,
     1, 15, 23, 26,
     5, 18, 31, 10,
     2, 8, 24, 14,
    32, 27, 3, 9,
    19, 13, 30, 6,
    22, 11, 4, 25
};

        // Bảng PC1
        int[] PC1 = {
    57,49,41,33,25,17,9,
    1,58,50,42,34,26,18,
    10,2,59,51,43,35,27,
    19,11,3,60,52,44,36,
    63,55,47,39,31,23,15,
    7,62,54,46,38,30,22,
    14,6,61,53,45,37,29,
    21,13,5,28,20,12,4
};

        // Bảng PC2
        int[] PC2 = {
    14,17,11,24,1,5,
    3,28,15,6,21,10,
    23,19,12,4,26,8,
    16,7,27,20,13,2,
    41,52,31,37,47,55,
    30,40,51,45,33,48,
    44,49,39,56,34,53,
    46,42,50,36,29,32
};

        // S-boxes
        int[,,] SBox = new int[8, 4, 16] {
{
{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},
{0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
{4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
{15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}
},
{
{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
{3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
{0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},
{13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}
},
{
{10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
{13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
{13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
{1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}
},
{
{7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
{13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
{10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
{3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}
},
{
{2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
{14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
{4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
{11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}
},
{
{12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
{10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
{9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
{4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}
},
{
{4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
{13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
{1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
{6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}
},
{
{13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
{1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
{7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},
{2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}
}
};

        int[] SHIFTS = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };

        // Tạo khóa con
        void GenerateKey()
        {
            Random rnd = new Random();
            desKey = new byte[8];
            rnd.NextBytes(desKey);
            //lblKey.Text = BitConverter.ToString(desKey).Replace("-", "");

            byte[] keyBits = BytesToBits(desKey);
            byte[] permutedKey = Permute(keyBits, PC1);
            byte[] C = new byte[28];
            byte[] D = new byte[28];
            Array.Copy(permutedKey, 0, C, 0, 28);
            Array.Copy(permutedKey, 28, D, 0, 28);

            int[] shifts = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };

            for (int i = 0; i < 16; i++)
            {
                C = RotateLeft(C, shifts[i]);
                D = RotateLeft(D, shifts[i]);
                byte[] CD = new byte[56];
                Array.Copy(C, 0, CD, 0, 28);
                Array.Copy(D, 0, CD, 28, 28);
                subKeys[i] = Permute(CD, PC2);
            }
        }

        void GenerateRoundKeys(byte[] key)
        {
            subKeys = new byte[16][];
            byte[] keyBits = BytesToBits(key);

            // PC1 – hoán vị ban đầu (56 bit)
            byte[] permutedKey = Permute(keyBits, PC1);

            // Chia thành 2 nửa
            byte[] C = new byte[28];
            byte[] D = new byte[28];
            Array.Copy(permutedKey, 0, C, 0, 28);
            Array.Copy(permutedKey, 28, D, 0, 28);

            for (int i = 0; i < 16; i++)
            {
                // Dịch trái
                C = RotateLeft(C, SHIFTS[i]);
                D = RotateLeft(D, SHIFTS[i]);

                // Nối lại
                byte[] CD = new byte[56];
                Array.Copy(C, 0, CD, 0, 28);
                Array.Copy(D, 0, CD, 28, 28);

                // PC2 – rút gọn thành 48 bit
                subKeys[i] = Permute(CD, PC2);
            }
        }


        // Mã hóa 1 block
        byte[] DESEncryptBlock(byte[] block)
        {
            byte[] bits = BytesToBits(block);
            bits = Permute(bits, IP);
            byte[] L = new byte[32];
            byte[] R = new byte[32];
            Array.Copy(bits, 0, L, 0, 32);
            Array.Copy(bits, 32, R, 0, 32);

            for (int i = 0; i < 16; i++)
            {
                byte[] tempR = R;
                byte[] f = Feistel(R, subKeys[i]);
                R = XOR(L, f);
                L = tempR;
            }

            byte[] combined = new byte[64];
            Array.Copy(R, 0, combined, 0, 32);
            Array.Copy(L, 0, combined, 32, 32);
            combined = Permute(combined, FP);
            return BitsToBytes(combined);
        }

        // Giải mã 1 block
        byte[] DESDecryptBlock(byte[] block)
        {
            byte[] bits = BytesToBits(block);
            bits = Permute(bits, IP);
            byte[] L = new byte[32];
            byte[] R = new byte[32];
            Array.Copy(bits, 0, L, 0, 32);
            Array.Copy(bits, 32, R, 0, 32);

            for (int i = 15; i >= 0; i--)
            {
                byte[] tempR = R;
                byte[] f = Feistel(R, subKeys[i]);
                R = XOR(L, f);
                L = tempR;
            }

            byte[] combined = new byte[64];
            Array.Copy(R, 0, combined, 0, 32);
            Array.Copy(L, 0, combined, 32, 32);
            combined = Permute(combined, FP);
            return BitsToBytes(combined);
        }

        // Các hàm hỗ trợ

        byte[] PadBytes(byte[] input)
        {
            int pad = 8 - (input.Length % 8);
            byte[] padded = new byte[input.Length + pad];
            Array.Copy(input, padded, input.Length);
            for (int i = input.Length; i < padded.Length; i++) padded[i] = (byte)pad;
            return padded;
        }

        byte[] UnpadBytes(byte[] input)
        {
            int pad = input[input.Length - 1];
            byte[] unpadded = new byte[input.Length - pad];
            Array.Copy(input, 0, unpadded, 0, unpadded.Length);
            return unpadded;
        }

        byte[] Permute(byte[] input, int[] table)
        {
            byte[] output = new byte[table.Length];
            for (int i = 0; i < table.Length; i++) output[i] = input[table[i] - 1];
            return output;
        }

        byte[] Feistel(byte[] R, byte[] K)
        {
            byte[] expanded = Permute(R, E);
            byte[] xored = XOR(expanded, K);
            byte[] sbox = SBoxSubstitute(xored);
            return Permute(sbox, P);
        }

        byte[] SBoxSubstitute(byte[] input)
        {
            byte[] output = new byte[32];
            for (int i = 0; i < 8; i++)
            {
                int offset = i * 6;
                int row = (input[offset] << 1) | input[offset + 5];
                int col = (input[offset + 1] << 3) | (input[offset + 2] << 2) | (input[offset + 3] << 1) | input[offset + 4];
                int val = SBox[i, row, col];
                for (int j = 0; j < 4; j++)
                    output[i * 4 + (3 - j)] = (byte)((val >> j) & 1);
            }
            return output;
        }

        byte[] XOR(byte[] a, byte[] b)
        {
            byte[] result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++) result[i] = (byte)(a[i] ^ b[i]);
            return result;
        }

        byte[] RotateLeft(byte[] input, int count)
        {
            byte[] output = new byte[input.Length];
            for (int i = 0; i < input.Length; i++)
                output[i] = input[(i + count) % input.Length];
            return output;
        }

        byte[] BytesToBits(byte[] bytes)
        {
            byte[] bits = new byte[bytes.Length * 8];
            for (int i = 0; i < bytes.Length; i++)
                for (int j = 0; j < 8; j++)
                    bits[i * 8 + j] = (byte)((bytes[i] >> (7 - j)) & 1);
            return bits;
        }

        byte[] BitsToBytes(byte[] bits)
        {
            byte[] bytes = new byte[bits.Length / 8];
            for (int i = 0; i < bytes.Length; i++)
                for (int j = 0; j < 8; j++)
                    bytes[i] |= (byte)(bits[i * 8 + j] << (7 - j));
            return bytes;
        }

        byte[] HexStringToByteArray(string hex)
        {
            int len = hex.Length / 2;
            byte[] data = new byte[len];
            for (int i = 0; i < len; i++)
                data[i] = Convert.ToByte(hex.Substring(i * 2, 2), 16);
            return data;
        }

        // Mã hóa DES theo ECB + PKCS7
        private string EncryptDES(string input, string hexKey)
        {
            byte[] keyBytes = HexStringToByteArray(hexKey);
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);

            using (var des = new DESCryptoServiceProvider())
            {
                des.Key = keyBytes;
                des.Mode = CipherMode.ECB;
                des.Padding = PaddingMode.PKCS7;

                using (var encryptor = des.CreateEncryptor())
                {
                    byte[] encryptedBytes = encryptor.TransformFinalBlock(inputBytes, 0, inputBytes.Length);
                    return BitConverter.ToString(encryptedBytes).Replace("-", "");
                }
            }
        }

        // Giải mã DES theo ECB + PKCS7
        private string DecryptDES(string hexEncrypted, string hexKey)
        {
            byte[] keyBytes = HexStringToByteArray(hexKey);
            byte[] encryptedBytes = HexStringToByteArray(hexEncrypted);

            using (var des = new DESCryptoServiceProvider())
            {
                des.Key = keyBytes;
                des.Mode = CipherMode.ECB;
                des.Padding = PaddingMode.PKCS7;

                using (var decryptor = des.CreateDecryptor())
                {
                    byte[] decryptedBytes = decryptor.TransformFinalBlock(encryptedBytes, 0, encryptedBytes.Length);
                    return Encoding.UTF8.GetString(decryptedBytes);
                }
            }
        }

        //chọn chế độ Sinh khóa
        private void rdo_Checked(object sender, RoutedEventArgs e)
        {
            // Đảm bảo các đối tượng đã được khởi tạo
            if (txtKey == null || rdoNhapTay == null || rdoSinhTuDong == null) return;

            if (rdoNhapTay.IsChecked == true)
            {
                txtKey.IsReadOnly = false;
                txtKey.Background = Brushes.White;
                originalKey = txtKey.Text; // Gán khóa tay nếu đã có
                isAutoGenerated = false;
                isKeyChangedNotified = false;
            }
            else if (rdoSinhTuDong.IsChecked == true)
            {
                txtKey.IsReadOnly = true;
                txtKey.Background = Brushes.LightGray;
                txtKey.Text = "";
                originalKey = "";
                isAutoGenerated = true;
                isKeyChangedNotified = false;
            }
        }

        private void txtKey_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (txtKey == null) return;

            string currentKey = txtKey.Text.Trim();

            if (!string.IsNullOrEmpty(originalKey) && currentKey != originalKey && !isKeyChangedNotified)
            {
                MessageBox.Show("Khóa đã bị thay đổi!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Warning);
                isKeyChangedNotified = true;
            }
        }


        private void txtKey_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            if (rdoSinhTuDong != null && rdoSinhTuDong.IsChecked == true)
            {
                MessageBox.Show("Không chỉnh sửa được khóa. Vui lòng chuyển sang chế độ nhập khóa bằng tay để sửa khóa.",
                                "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);

                e.Handled = true; // Chặn không cho focus vào TextBox
            }
        }

        private void btnKiemTraKetQua_Click(object sender, RoutedEventArgs e)
        {
            string plainText = txtPlainText.Text.Trim();
            string decryptedText = txtDecryptedText.Text.Trim();

            if (string.IsNullOrEmpty(plainText) || string.IsNullOrEmpty(decryptedText))
            {
                MessageBox.Show("Vui lòng đảm bảo rằng cả bản rõ và kết quả sau giải mã đều có nội dung.",
                                "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            if (plainText == decryptedText)
            {
                MessageBox.Show("Kết quả đúng! Bản rõ sau giải mã khớp với bản rõ ban đầu.",
                                "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
            {
                MessageBox.Show("Kết quả sai! Bản rõ sau giải mã Không khớp với bản rõ ban đầu.",
                                "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }



        private void btnGenerateKey_Click(object sender, RoutedEventArgs e)
        {
            // Chỉ sinh khóa nếu đang chọn chế độ "Sinh tự động"
            if (rdoSinhTuDong.IsChecked == true)
            {
                GenerateKey();
                string keyHex = BitConverter.ToString(desKey).Replace("-", "");
                txtKey.Text = keyHex;
                txtKey.IsReadOnly = true;
                txtKey.Background = Brushes.LightGray;

                originalKey = keyHex; // Lưu lại khóa gốc
                isAutoGenerated = true;
                isKeyChangedNotified = false;
            }
            else
            {
                MessageBox.Show("Vui lòng chọn chế độ 'Sinh tự động' để sử dụng chức năng này.", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void btnEncrypt_Click(object sender, RoutedEventArgs e)
        {
            //GenerateKey();
            // Lấy khóa từ txtKhoa
            string hexKey = txtKey.Text.Trim();
            string input = txtPlainText.Text.Trim();

            // Kiểm tra cả hai ô trống
            if (string.IsNullOrEmpty(hexKey) && string.IsNullOrEmpty(input))
            {
                MessageBox.Show("Vui lòng nhập khóa và bản rõ trước khi mã hóa.", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            // Kiểm tra chỉ thiếu khóa
            if (string.IsNullOrEmpty(hexKey))
            {
                MessageBox.Show("Chưa nhập khóa. Vui lòng nhập khóa trước khi mã hóa.", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            // Kiểm tra chỉ thiếu bản rõ
            if (string.IsNullOrEmpty(input))
            {
                MessageBox.Show("Chưa nhập bản rõ. Vui lòng nhập bản rõ trước khi mã hóa.", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            // Kiểm tra độ dài khóa
            if (hexKey.Length != 16)
            {
                MessageBox.Show("Khóa phải có đúng 16 ký tự hex (64 bit)", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            // Kiểm tra thay đổi bản rõ so với lần trước
            if (!isFirstEncrypt && input != originalPlainText)
            {
                MessageBox.Show("Bản rõ đã thay đổi so với lần mã hóa trước!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
            }

            // Mã hóa
            string encryptedHex = EncryptDES(input, hexKey);

            // Kiểm tra thay đổi bản mã
            if (!isFirstEncrypt && encryptedHex != originalEncryptedText)
            {
                MessageBox.Show("Bản mã đã thay đổi so với lần trước!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
            }

            // Gán bản mã vào ô kết quả
            txtEncryptedText.Text = encryptedHex;

            // Cập nhật lại bản gốc
            originalPlainText = input;
            originalEncryptedText = encryptedHex;
            isFirstEncrypt = false;

            // ✅ Thông báo thành công
            MessageBox.Show("Mã hóa thành công!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);

        }

        private void btnMoveToCipher_Click(object sender, RoutedEventArgs e)
        {
            // Chuyển bản mã từ txtEncrypted sang txtBanMa
            txtCipherText.Text = txtEncryptedText.Text;

        }

        private string DecryptDES_Lenient(string hexEncrypted, string hexKey)
        {
            try
            {
                byte[] keyBytes = HexStringToByteArray(hexKey);
                byte[] encryptedBytes = HexStringToByteArray(hexEncrypted);

                using (var des = new DESCryptoServiceProvider())
                {
                    des.Key = keyBytes;
                    des.Mode = CipherMode.ECB;
                    des.Padding = PaddingMode.None;  // không xử lý padding để giảm rủi ro lỗi

                    using (var decryptor = des.CreateDecryptor())
                    {
                        byte[] decryptedBytes = decryptor.TransformFinalBlock(encryptedBytes, 0, encryptedBytes.Length);

                        // Cố gắng trả về UTF-8, nếu lỗi thì dùng dạng HEX
                        try
                        {
                            return Encoding.UTF8.GetString(decryptedBytes);
                        }
                        catch
                        {
                            return BitConverter.ToString(decryptedBytes).Replace("-", "");
                        }
                    }
                }
            }
            catch
            {
                return "Không thể giải mã được (dữ liệu không hợp lệ)";
            }
        }


        private void btnDecrypt_Click(object sender, RoutedEventArgs e)
        {
            //string hexKey = txtKey.Text.Trim();
            string hexKey = txtKeyPrivate.Text.Trim();
            string hexEncrypted = txtCipherText.Text.Trim();

            try
            {
                // Thử giải mã chuẩn
                string decryptedText = DecryptDES(hexEncrypted, hexKey);
                txtDecryptedText.Text = decryptedText;

                // ✅ Hiển thị thông báo thành công
                MessageBox.Show("Giải mã thành công!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch
            {
                // Nếu lỗi, thử lại bằng giải mã mềm
                string decryptedText = DecryptDES_Lenient(hexEncrypted, hexKey);
                txtDecryptedText.Text = decryptedText;

                // Hiển thị cảnh báo
                MessageBox.Show("Bản mã đã bị thay đổi!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);

               // MessageBox.Show("Bản mã có thể đã bị thay đổi!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Warning);
            }

        }

        private void btnOpenFile_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "Supported files (*.docx;*.xlsx;*.pdf)|*.docx;*.xlsx;*.pdf|Word files (*.docx)|*.docx|Excel files (*.xlsx)|*.xlsx|PDF files (*.pdf)|*.pdf|All files (*.*)|*.*"
            };


            if (openFileDialog.ShowDialog() == true)
            {
                string filePath = openFileDialog.FileName;
                string extension = System.IO.Path.GetExtension(filePath).ToLower();
                StringBuilder text = new StringBuilder();

                try
                {
                    // Đọc file Word (.docx)
                    if (extension == ".docx")
                    {
                        using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, false))
                        {
                            var body = wordDoc.MainDocumentPart.Document.Body;
                            text.Append(body.InnerText);
                        }
                    }
                    // Đọc file Excel (.xlsx)
                    else if (extension == ".xlsx")
                    {
                        using (var workbook = new XLWorkbook(filePath))
                        {
                            var worksheet = workbook.Worksheet(1);
                            foreach (var row in worksheet.RowsUsed())
                            {
                                foreach (var cell in row.Cells())
                                {
                                    text.Append(cell.Value.ToString() + "\t");
                                }
                                text.AppendLine();
                            }
                        }
                    }
                    // Đọc file PDF (.pdf)
                    // Đọc file PDF (.pdf)
                    else if (extension == ".pdf")
                    {
                        try
                        {
                            using (PdfDocument document = PdfDocument.Open(filePath))
                            {
                                foreach (var page in document.GetPages())
                                {
                                    text.AppendLine(page.Text);  // Đọc toàn bộ văn bản trong trang
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Lỗi khi đọc file PDF: " + ex.Message);
                        }
                    }

                    else
                    {
                        MessageBox.Show("Chỉ hỗ trợ .docx, .xlsx, .pdf");
                        return;
                    }

                    // Hiển thị nội dung đọc được vào TextBox
                    txtPlainText.Text = text.ToString();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi khi đọc file: " + ex.Message);
                }
            }
        }

//        SaveFileDialog saveFileDialog = new SaveFileDialog
//        {
//            Filter = "Word Document (*.docx)|*.docx|Excel Workbook (*.xlsx)|*.xlsx|Text File (*.txt)|*.txt"
//        };

//    if (saveFileDialog.ShowDialog() == true)
//    {
//        string filePath = saveFileDialog.FileName;
//        string ext = System.IO.Path.GetExtension(filePath).ToLower();


//        try
//        {
//            if (ext == ".docx")
//            {
//                using (var wordDoc = WordprocessingDocument.Create(filePath, DocumentFormat.OpenXml.WordprocessingDocumentType.Document))
//                {
//                    MainDocumentPart mainPart = wordDoc.AddMainDocumentPart();
//        mainPart.Document = new Document();
//        Body body = new Body();

//        string[] lines = txtEncryptedText.Text.Split('\n');
//                    foreach (string line in lines)
//                    {
//                        var paragraph = new DocumentFormat.OpenXml.Wordprocessing.Paragraph(
//                            new DocumentFormat.OpenXml.Wordprocessing.Run(
//                                new DocumentFormat.OpenXml.Wordprocessing.Text(line)
//                            )
//                        );
//        body.Append(paragraph);
//                    }

//    mainPart.Document.Append(body);
//                    mainPart.Document.Save();
//                }
//            }
//            else if (ext == ".xlsx")
//{
//    using (var workbook = new XLWorkbook())
//    {
//        var worksheet = workbook.Worksheets.Add("Sheet1");
//        string[] lines = txtEncryptedText.Text.Split('\n');
//        for (int i = 0; i < lines.Length; i++)
//        {
//            worksheet.Cell(i + 1, 1).Value = lines[i];
//        }
//        workbook.SaveAs(filePath);
//    }
//}
//else if (ext == ".txt")
//{
//    File.WriteAllText(filePath, txtEncryptedText.Text);
//}
//else
//{
//    MessageBox.Show("Chỉ hỗ trợ định dạng .docx, .xlsx, .txt");
//    return;
//}

//MessageBox.Show("Lưu file thành công!");
//        }
//        catch (Exception ex)
//        {
//            MessageBox.Show("Lỗi khi lưu file: " + ex.Message);
//        }
//    }

        private void btnSaveFile_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "Word Document (*.docx)|*.docx|Excel Workbook (*.xlsx)|*.xlsx|Text File (*.txt)|*.txt|PDF File (*.pdf)|*.pdf|All File (*.*)|*.*"
            };


            if (saveFileDialog.ShowDialog() == true)
            {
                string filePath = saveFileDialog.FileName;
                string ext = System.IO.Path.GetExtension(filePath).ToLower();

                try
                {
                    if (ext == ".docx")
                    {
                        using (var wordDoc = WordprocessingDocument.Create(filePath, DocumentFormat.OpenXml.WordprocessingDocumentType.Document))
                        {
                            MainDocumentPart mainPart = wordDoc.AddMainDocumentPart();
                            mainPart.Document = new Document();
                            Body body = new Body();

                            string[] lines = txtEncryptedText.Text.Split('\n');
                            foreach (string line in lines)
                            {
                                var paragraph = new DocumentFormat.OpenXml.Wordprocessing.Paragraph(
                                    new DocumentFormat.OpenXml.Wordprocessing.Run(
                                        new DocumentFormat.OpenXml.Wordprocessing.Text(line)
                                    )
                                );
                                body.Append(paragraph);
                            }

                            mainPart.Document.Append(body);
                            mainPart.Document.Save();
                        }
                    }
                    else if (ext == ".xlsx")
                    {
                        using (var workbook = new XLWorkbook())
                        {
                            var worksheet = workbook.Worksheets.Add("Sheet1");
                            string[] lines = txtEncryptedText.Text.Split('\n');
                            for (int i = 0; i < lines.Length; i++)
                            {
                                worksheet.Cell(i + 1, 1).Value = lines[i];
                            }
                            workbook.SaveAs(filePath);
                        }
                    }
                    else if (ext == ".txt")
                    {
                        File.WriteAllText(filePath, txtEncryptedText.Text);
                    }
                    else if (ext == ".pdf")
                    {
                        try
                        {
                            // Tạo và lưu file PDF bằng PDFsharp
                            var document = new PdfSharp.Pdf.PdfDocument();
                            document.Info.Title = "Encrypted Text PDF";

                            // Thêm một trang vào PDF
                            var page = document.AddPage();

                            // Tạo đối tượng Graphics để vẽ văn bản lên trang PDF
                            var gfx = PdfSharp.Drawing.XGraphics.FromPdfPage(page);

                            // Đặt font chữ
                            var font = new PdfSharp.Drawing.XFont("Verdana", 12);

                            // Vẽ văn bản lên PDF
                            string[] lines = txtEncryptedText.Text.Split('\n');
                            int yPosition = 20;
                            foreach (var line in lines)
                            {
                                gfx.DrawString(line, font, PdfSharp.Drawing.XBrushes.Black, new PdfSharp.Drawing.XPoint(20, yPosition));
                                yPosition += 20; // Tăng vị trí y để văn bản không bị chồng lên nhau
                            }

                            // Lưu tài liệu PDF vào file
                            document.Save(filePath);

                            MessageBox.Show("Lưu file PDF thành công!");
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Lỗi khi lưu file PDF: " + ex.Message);
                        }
                    }

                    else
                    {
                        MessageBox.Show("Chỉ hỗ trợ định dạng .docx, .xlsx, .txt, .pdf");
                        return;
                    }

                    MessageBox.Show("Lưu file thành công!");
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi khi lưu file: " + ex.Message);
                }
            }
        }



        private void btnOpenFile2_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "Supported files (*.docx;*.xlsx;*.pdf)|*.docx;*.xlsx;*.pdf|Word files (*.docx)|*.docx|Excel files (*.xlsx)|*.xlsx|PDF files (*.pdf)|*.pdf|All files (*.*)|*.*"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                string filePath = openFileDialog.FileName;
                string extension = System.IO.Path.GetExtension(filePath).ToLower();
                StringBuilder text = new StringBuilder();

                try
                {
                    // Đọc file Word (.docx)
                    if (extension == ".docx")
                    {
                        using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, false))
                        {
                            var body = wordDoc.MainDocumentPart.Document.Body;
                            text.Append(body.InnerText);
                        }
                    }
                    // Đọc file Excel (.xlsx)
                    else if (extension == ".xlsx")
                    {
                        using (var workbook = new XLWorkbook(filePath))
                        {
                            var worksheet = workbook.Worksheet(1);
                            foreach (var row in worksheet.RowsUsed())
                            {
                                foreach (var cell in row.Cells())
                                {
                                    text.Append(cell.Value.ToString() + "\t");
                                }
                                text.AppendLine();
                            }
                        }
                    }
                    // Đọc file PDF (.pdf)
                    // Đọc file PDF (.pdf)
                    else if (extension == ".pdf")
                    {
                        try
                        {
                            using (PdfDocument document = PdfDocument.Open(filePath))
                            {
                                foreach (var page in document.GetPages())
                                {
                                    text.AppendLine(page.Text);  // Đọc toàn bộ văn bản trong trang
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Lỗi khi đọc file PDF: " + ex.Message);
                        }
                    }

                    else
                    {
                        MessageBox.Show("Chỉ hỗ trợ .docx, .xlsx, .pdf");
                        return;
                    }

                    // Hiển thị nội dung đọc được vào TextBox
                    txtCipherText.Text = text.ToString();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi khi đọc file: " + ex.Message);
                }
            }
        }

        private void btnSaveFile2_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "Word Document (*.docx)|*.docx|Excel Workbook (*.xlsx)|*.xlsx|Text File (*.txt)|*.txt|PDF File (*.pdf)|*.pdf|All File (*.*)|*.*"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                string filePath = saveFileDialog.FileName;
                string ext = System.IO.Path.GetExtension(filePath).ToLower();

                try
                {
                    if (ext == ".docx")
                    {
                        using (var wordDoc = WordprocessingDocument.Create(filePath, DocumentFormat.OpenXml.WordprocessingDocumentType.Document))
                        {
                            MainDocumentPart mainPart = wordDoc.AddMainDocumentPart();
                            mainPart.Document = new Document();
                            Body body = new Body();

                            string[] lines = txtDecryptedText.Text.Split('\n');
                            foreach (string line in lines)
                            {
                                var paragraph = new DocumentFormat.OpenXml.Wordprocessing.Paragraph(
                                    new DocumentFormat.OpenXml.Wordprocessing.Run(
                                        new DocumentFormat.OpenXml.Wordprocessing.Text(line)
                                    )
                                );
                                body.Append(paragraph);
                            }

                            mainPart.Document.Append(body);
                            mainPart.Document.Save();
                        }
                    }
                    else if (ext == ".xlsx")
                    {
                        using (var workbook = new XLWorkbook())
                        {
                            var worksheet = workbook.Worksheets.Add("Sheet1");
                            string[] lines = txtDecryptedText.Text.Split('\n');
                            for (int i = 0; i < lines.Length; i++)
                            {
                                worksheet.Cell(i + 1, 1).Value = lines[i];
                            }
                            workbook.SaveAs(filePath);
                        }
                    }
                    else if (ext == ".txt")
                    {
                        File.WriteAllText(filePath, txtDecryptedText.Text);
                    }
                    else if (ext == ".pdf")
                    {
                        try
                        {
                            // Tạo và lưu file PDF bằng PDFsharp
                            var document = new PdfSharp.Pdf.PdfDocument();
                            document.Info.Title = "Encrypted Text PDF";

                            // Thêm một trang vào PDF
                            var page = document.AddPage();

                            // Tạo đối tượng Graphics để vẽ văn bản lên trang PDF
                            var gfx = PdfSharp.Drawing.XGraphics.FromPdfPage(page);

                            // Đặt font chữ
                            var font = new PdfSharp.Drawing.XFont("Verdana", 12);

                            // Vẽ văn bản lên PDF
                            string[] lines = txtDecryptedText.Text.Split('\n');
                            int yPosition = 20;
                            foreach (var line in lines)
                            {
                                gfx.DrawString(line, font, PdfSharp.Drawing.XBrushes.Black, new PdfSharp.Drawing.XPoint(20, yPosition));
                                yPosition += 20; // Tăng vị trí y để văn bản không bị chồng lên nhau
                            }

                            // Lưu tài liệu PDF vào file
                            document.Save(filePath);

                            MessageBox.Show("Lưu file PDF thành công!");
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Lỗi khi lưu file PDF: " + ex.Message);
                        }
                    }

                    else
                    {
                        MessageBox.Show("Chỉ hỗ trợ định dạng .docx, .xlsx, .txt, .pdf");
                        return;
                    }

                    MessageBox.Show("Lưu file thành công!");
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi khi lưu file: " + ex.Message);
                }
            }
        }

        private void btnReset_Click(object sender, RoutedEventArgs e)
        {
            // Reset tất cả các TextBox
            txtKey.Text = "";
            txtPlainText.Text = "";
            txtEncryptedText.Text = "";
            txtCipherText.Text = "";
            txtDecryptedText.Text = "";

            // Nếu đang ở chế độ Sinh tự động thì chuyển về Nhập tay
            if (rdoSinhTuDong.IsChecked == true)
            {
                rdoNhapTay.IsChecked = true;
            }

            // Bật chỉnh sửa ô khóa
            txtKey.IsReadOnly = false;
            txtKey.Background = Brushes.White;

            
        }

        private void txtKeyPrivate_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (txtKeyPrivate == null) return;

            string currentPrivateKey = txtKeyPrivate.Text.Trim();

            if (!string.IsNullOrEmpty(originalPrivateKey) && currentPrivateKey != originalPrivateKey && !isPrivateKeyChangedNotified)
            {
                MessageBox.Show("Khóa bí mật đã bị thay đổi!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
                isPrivateKeyChangedNotified = true;
            }
        }

        private void btnChuyenKhoa_Click(object sender, RoutedEventArgs e)
        {
            txtKeyPrivate.Text = txtKey.Text;

            // ⚠️ Cập nhật lại gốc để theo dõi thay đổi chính xác
            originalPrivateKey = txtKeyPrivate.Text.Trim();
            isPrivateKeyChangedNotified = false;
        }
    }
}
